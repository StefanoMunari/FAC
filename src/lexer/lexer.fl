%{
#include <stdlib.h>
int line_number = 1;
%}



ASSIGNMENT	=


SIGN 		[+|-]
SPACE		[ \n\t\r\b\v\0]
DELIMITER 	;
LBRAC		\(
RBRAC		\)
LSQRBRAC	\[
RSQRBRAC	\]
LCURLYBRAC	\{
RCURLYBRAC	\}

LETTER		[a-zA-Z]
DIGIT 		[0-9]
DIGIT0 		[1-9]
NUMERAL		{DIGIT}*

FRACT 		{LSQRBRAC}{DIGIT}+\|{DIGIT0}{NUMERAL}{RSQRBRAC}

ID 			({LETTER}|_)({LETTER}|{DIGIT}|_)*

TYPE		(bool|fract)
DECLARATION {TYPE}{SPACE}*{ID}

SUM			\+
DIFF		\-
MULT		\*
DIV			\/
REM			\%
AOP			{MULT}|{DIV}|{REM}|{SUM}|{DIFF}


NOT		!
AND 	&&
OR		\|\|
XOR 	X
IMPLY 	\-\>
EQ 		==
NEQ		{NOT}{EQ}
LT 		<
GT 		>
LEQ 	<=
GEQ 	>=
BOP1	{NOT}
BOP2 	{AND}|{OR}|{XOR}|{IMPLY}
RELOP 	{EQ}|{NEQ}|{LT}|{GT}|{LEQ}|{GEQ}
BOOL 	(true|false)

COMMENT 	\/\*([^*"]*|".*"|\*+[^/])*\*\/

WHILE	while
IF		if
ELSE	else
SKIP	skip

%%
{COMMENT} 			{ /* removing comments */}
\n					{ line_number++; }
({SPACE})*			{ /* get rid of spaces */ }
{DELIMITER}			{ printf("<DELIMITER>\n"); }
{LBRAC}				{ printf("<LBRAC>\n"); }
{RBRAC}				{ printf("<RBRAC>\n"); }
{FRACT}				{ tokenize_fract(yytext, yyleng); }
{LCURLYBRAC}		{ printf("<LCURLYBRAC>\n"); }
{RCURLYBRAC}		{ printf("<RCURLYBRAC>\n"); }
{AOP}				{ printf("<AOP, %s >\n", yytext); }
{TYPE}				{ printf("<TYPE_DECLARATION, %s >\n", yytext); }
{NUMERAL}			{ printf("<INTEGER_NUMERAL>\n", yytext); /* matching a set of digits */ }
{BOOL}				{ printf("<BOOL, %s>\n", yytext); }
{BOP1}				{ printf("<BOP1, %s>\n", yytext); }
{BOP2}				{ printf("<BOP2, %s>\n", yytext); }
{RELOP}				{ printf("<RELOP, %s>\n", yytext); }
{ASSIGNMENT}		{ printf("<ASSIGNMENT>\n"); }
{WHILE}				{ printf("<WHILE>\n"); }
{IF}				{ printf("<IF>\n");    }
{ELSE}				{ printf("<ELSE>\n");	}
{ID}				{ printf("<ID, %s>\n", yytext); }
.					{ fprintf(stderr,"Line %d pattern '%s' not recognized\n", line_number, yytext); }
%%

int main(int argc, char ** argv) {
	if(argc > 1) {
		FILE * fp = fopen(argv[1], "r");
		if(fp == NULL) {
			fprintf(stderr, "File %s: no such file or directory. The stdin will be used\n", argv[1]);
		} else {
			yyin = fp;
		}
	}
	yylex();
	return EXIT_SUCCESS;
}
