/**
 * @file
 * @brief Record of the Abstract Syntax Tree (ast) -
 *	represents the data stored in each node of the ast
 * @author <mirko.bez@studenti.unipd.it>
 * @author <stefano.munari.1@studenti.unipd.it>
 */
#ifndef __AST_RECORD__H__
#define __AST_RECORD__H__
#include "../types/factype.h"
#include "../types/factype_ast.h"
/**
 * @brief record of the ast
 */
typedef struct record {
	/** the category of the token defined in @link factype_ast.h*/
	ast_category token;
	/** The line that corresponds to this token in the source file */
	int line;
	/** The token generated by the lexer */
	op_t op;
	/** Information on the type used only if the token is a type declaration */
	type_t type;
	/** A generic pointer that can be:
	 * - a string if the token is AST_ID
	 * - a boolean if the token is AST_BOOL
	 * - a fract value if the token is AST_FRACT.
	 * - NULL, otherwise
	 */
	void * value;
} record;

/**
 * Constructor for the ast record struct
 * @param token the category of the ast @see factype_ast.h
 * @param op an operation @see factype.h
 * @param line the line number of the token in the source code
 * @param value @see ast.h @see parser.y for its usage
 * @return a new ast record with the given values
 */
record * astRecord(ast_category token, int line, op_t op, void * value);

/**
 * free the given record instance
 * @param this the record instance to free
 */
void freeastRecord(record *);

#endif /* __AST_RECORD__H__ */
