%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char BUFF0[128];
char BUFF1[128];
int line_number = 0;
void tokenize_fract();
%}

SIGN 		[+|-]
SPACE		[ \n\t\r\b\v\0]
DELIMITER 	;
LBRAC		\(
RBRAC		\)

LETTER	[a-zA-Z]
DIGIT 	[0-9]
DIGIT0 	[1-9]
FRACT 	{SIGN}?\[{SPACE}*{DIGIT}+{SPACE}*\|{SPACE}*{DIGIT0}{DIGIT}*{SPACE}*\]
ERROR_FRACT {SIGN}?\[{SPACE}*{DIGIT}+{SPACE}*\|{SPACE}*0*{SPACE}*\]
ID 		({LETTER}|_)({LETTER}|{DIGIT}|_)*

%%
{FRACT} { tokenize_fract(); }
{ERROR_FRACT} {fprintf(stderr, 
	"Line number %d: %s is not a valid fractional number: 0 is not a valid denominator", line_number, yytext);}
\n		{ line_number++; }
%%
void tokenize_fract(){
	char * c = malloc(sizeof(char) * (yyleng+1));
	strncpy(c, yytext, yyleng*sizeof(char));
	c[yyleng] = '\0';
	sscanf(c,"[%[^|]|%[^]]]", BUFF0, BUFF1);
	
	int numerator = strtol(BUFF0, NULL, 0);
	int denominator = strtol(BUFF1, NULL, 0);
	printf("FRACT %d %d", numerator, denominator); 
	
	free(c);
}

int main(int argc, char ** argv) {
	if(argc > 1) {
		FILE * fp = fopen(argv[1], "r");
		if(fp == NULL) {
			fprintf(stderr, "File %s: no such file or directory. The stdin will be used\n", argv[1]);
		} else {
			yyin = fp;
		}
	}
	yylex();
	return EXIT_SUCCESS;
}
